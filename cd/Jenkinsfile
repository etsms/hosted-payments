pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
  }
  agent {
    label 'DATL-6CLCXK2'
  }
  parameters {
    string(name: 'buildName', defaultValue: 'hosted-payments.js', description: 'what is the build/repo name?')
    string(name: 'buildProject', defaultValue: 'EW', description: 'what is the project name?')
    string(name: 'buildType', defaultValue: 'other', description: 'what is the project type (dotnetcore, vb6, or other)?')
    string(name: 'deployLocation', defaultValue: '', description: 'where is this deployed?')
    string(name: 'deployType', defaultValue: 'on-premise', description: 'what type of deployment (on-premise or azure)?')
    string(name: 'version', defaultValue: '0.0.0', description: 'what is the project version?')
  }
  stages {
    stage('Setup') {
      steps {
        fileExists '/cd/config/on-premise-dev.json'
        fileExists '/cd/config/azure-dev.json'
        fileExists '/cd/deploy-azure.ps1'
        fileExists '/cd/deploy-on-premise.ps1'
        fileExists '/cd/release.ps1'
        fileExists '/cd/Write-PublishProfile.ps1'
        bat label: 'jenkins setup', script: '''
          SET APPDATA=C:\\Users\\jenkins\\AppData\\Roaming
          SET LOCALAPPDATA=C:\\Users\\jenkins\\AppData\\Local
          SET USERPROFILE=C:\\Users\\jenkins'''
      }
    }
    stage('Release') {
      steps {
        powershell label: 'release script', script: ".\\cd\\release.ps1 ${env.WORKSPACE} ${params.buildType} ${params.buildName} ${branch_name}"
      }
    }
    stage('DEV Azure - Deploy') {
      when {
        expression { params.deployType == 'azure' }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: '5aaa5d6b-4bed-44ec-a1a0-8eff9c41eb6a', passwordVariable: 'deployPass', usernameVariable: 'deployUser')]) {
          powershell label: 'deploy dev azure script', script: ".\\cd\\deploy-azure.ps1 ${env.WORKSPACE} ${params.buildType} dev ${params.buildName} ${params.version} ${params.deployLocation} ${params.deployType} ${deployUser} ${deployPass}"
        }
      }
    }
    stage('DEV OnPrem - Deploy') {
      when {
        expression { params.deployType == 'on-premise' }
      }
      steps {
        // need on-prem credentials GUID from Evan/Jenkins
        withCredentials([usernamePassword(credentialsId: '5aaa5d6b-4bed-44ec-a1a0-8eff9c41eb6a', passwordVariable: 'deployPass', usernameVariable: 'deployUser')]) { 
          powershell label: 'deploy dev on premise script', script: ".\\cd\\deploy-on-premise.ps1 ${env.WORKSPACE} ${params.buildType} dev ${params.buildName} ${params.version} ${params.deployLocation} ${params.deployType} ${deployUser} ${deployPass}"
        }
      }
    }
    // Eventually will need the same for stg and prd...
  }
  post {
    always {
      cleanWs()
    }
    success {
      rocketSend channel: 'hosted-payments.js', message: "build #${env.BUILD_ID} for version ${params.version} was successful!"
      rocketSend channel: 'emoney-jenkins', message: "build #${env.BUILD_ID} for version ${params.version} was successful!"
    }
    failure {
      rocketSend channel: 'hosted-payments.js', message: "build #${env.BUILD_ID} for version ${params.version} was a failure..."
      rocketSend channel: 'emoney-jenkins', message: "build #${env.BUILD_ID} for version ${params.version} was a failure..."
    }
    changed {
      rocketSend channel: 'emoney-jenkins', message: "${params.buildName} pipeline was changed #${env.BUILD_ID}..."
    }
  }
}

